# Generated by Django 5.2 on 2025-07-13 09:08

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("regions", "0001_initial"),
        ("services", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Professional",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("bio", models.TextField(blank=True)),
                (
                    "experience_years",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                (
                    "rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("total_reviews", models.IntegerField(default=0)),
                ("is_verified", models.BooleanField(db_index=True, default=False)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("verification_documents", models.JSONField(blank=True, default=list)),
                ("travel_radius_km", models.IntegerField(default=10)),
                ("min_booking_notice_hours", models.IntegerField(default=24)),
                ("cancellation_policy", models.TextField(blank=True)),
                (
                    "commission_rate",
                    models.DecimalField(decimal_places=2, default=15.0, max_digits=5),
                ),
                ("profile_completed", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="professional_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProfessionalRegion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_primary", models.BooleanField(default=False)),
                (
                    "travel_fee",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "professional",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="professionals.professional",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="regions.region"
                    ),
                ),
            ],
            options={
                "unique_together": {("professional", "region")},
            },
        ),
        migrations.AddField(
            model_name="professional",
            name="regions",
            field=models.ManyToManyField(
                related_name="professionals",
                through="professionals.ProfessionalRegion",
                to="regions.region",
            ),
        ),
        migrations.CreateModel(
            name="ProfessionalService",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "custom_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("preparation_time_minutes", models.IntegerField(default=0)),
                ("cleanup_time_minutes", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "professional",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="professionals.professional",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="regions.region"
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="services.service",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="professional",
            name="services",
            field=models.ManyToManyField(
                related_name="professionals",
                through="professionals.ProfessionalService",
                to="services.service",
            ),
        ),
        migrations.CreateModel(
            name="ProfessionalUnavailability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(db_index=True)),
                ("start_time", models.TimeField(blank=True, null=True)),
                ("end_time", models.TimeField(blank=True, null=True)),
                ("reason", models.CharField(blank=True, max_length=200)),
                ("is_recurring", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "professional",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="unavailable_dates",
                        to="professionals.professional",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="regions.region"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProfessionalAvailability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "weekday",
                    models.IntegerField(
                        choices=[
                            (0, "Monday"),
                            (1, "Tuesday"),
                            (2, "Wednesday"),
                            (3, "Thursday"),
                            (4, "Friday"),
                            (5, "Saturday"),
                            (6, "Sunday"),
                        ],
                        db_index=True,
                    ),
                ),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                ("is_active", models.BooleanField(default=True)),
                ("break_start", models.TimeField(blank=True, null=True)),
                ("break_end", models.TimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "professional",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="availability_schedule",
                        to="professionals.professional",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="regions.region"
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["professional", "region", "weekday", "is_active"],
                        name="professiona_profess_4b492f_idx",
                    )
                ],
                "unique_together": {
                    ("professional", "region", "weekday", "start_time")
                },
            },
        ),
        migrations.CreateModel(
            name="ProfessionalDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("id", "ID/Passport"),
                            ("certificate", "Professional Certificate"),
                            ("license", "License"),
                            ("insurance", "Insurance Certificate"),
                            ("portfolio", "Portfolio/Work Sample"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "document_file",
                    models.FileField(upload_to="professional_documents/"),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("is_verified", models.BooleanField(default=False)),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                ("verification_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "professional",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="professionals.professional",
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["professional", "document_type"],
                        name="professiona_profess_ab6271_idx",
                    ),
                    models.Index(
                        fields=["is_verified"], name="professiona_is_veri_51571c_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="professionalservice",
            index=models.Index(
                fields=["professional", "region", "is_active"],
                name="professiona_profess_d968b0_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="professionalservice",
            unique_together={("professional", "service", "region")},
        ),
        migrations.AddIndex(
            model_name="professional",
            index=models.Index(
                fields=["is_active", "is_verified", "rating"],
                name="professiona_is_acti_ae6a4c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="professional",
            index=models.Index(
                fields=["rating", "total_reviews"], name="professiona_rating_fbaf20_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="professional",
            index=models.Index(
                fields=["created_at"], name="professiona_created_466c87_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="professionalunavailability",
            index=models.Index(
                fields=["professional", "date"], name="professiona_profess_ca1c86_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="professionalunavailability",
            index=models.Index(
                fields=["date", "is_recurring"], name="professiona_date_e9419b_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="professionalunavailability",
            unique_together={("professional", "region", "date", "start_time")},
        ),
    ]
