version: "3.8"

services:
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./backups/postgres:/backups
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - labmyshare_network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - labmyshare_network

  web:
    image: ghcr.io/${GITHUB_REPOSITORY:-beautyspabyshea/labmyshare}:latest
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn labmyshare.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2 --timeout 120"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "127.0.0.1:8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - labmyshare_network

  celery:
    image: ghcr.io/${GITHUB_REPOSITORY:-beautyspabyshea/labmyshare}:latest
    restart: unless-stopped
    command: celery -A labmyshare worker --loglevel=info --concurrency=4
    volumes:
      - media_volume:/app/media
      - logs_volume:/app/logs
    env_file:
      - .env
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "celery", "-A", "labmyshare", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - labmyshare_network

  celery-beat:
    image: ghcr.io/${GITHUB_REPOSITORY:-beautyspabyshea/labmyshare}:latest
    restart: unless-stopped
    command: celery -A labmyshare beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - logs_volume:/app/logs
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - labmyshare_network

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/production.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - ssl_certs:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
    networks:
      - labmyshare_network

  # Database backup service
  db-backup:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups/postgres:/backups
      - ./docker/scripts/backup.sh:/backup.sh
    command: >
      sh -c "chmod +x /backup.sh && 
             echo '0 2 * * * /backup.sh' | crontab - && 
             crond -f"
    depends_on:
      - db
    networks:
      - labmyshare_network

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/www/labmyshare/storage/postgres

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/www/labmyshare/storage/redis

  static_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/www/labmyshare/storage/static

  media_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/www/labmyshare/storage/media

  logs_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/www/labmyshare/storage/logs

  ssl_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/www/labmyshare/storage/ssl

  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/www/labmyshare/storage/nginx-logs

networks:
  labmyshare_network:
    driver: bridge
