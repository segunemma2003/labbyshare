name: Simple Deployment (No Docker)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: labmyshare2020
          POSTGRES_DB: labmyshare_db
          POSTGRES_USER: labmyshare
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov

      - name: Set up test environment
        run: |
          cp .env.example .env
          echo "DEBUG=True" >> .env
          echo "SECRET_KEY=test-secret-key" >> .env
          echo "DB_NAME=labmyshare_db" >> .env
          echo "DB_USER=labmyshare" >> .env
          echo "DB_PASSWORD=labmyshare2020" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "REDIS_URL=redis://localhost:6379/1" >> .env

      - name: Run tests
        run: |
          python manage.py migrate --run-syncdb
          python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    environment:
      name: production
      url: http://backend.beautyspabyshea.co.uk:8080

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "Deploying application..."
          # (Deployment logic goes here, shortened for brevity)

          # Create celery service (only if Redis is working)
          if redis-cli ping >/dev/null 2>&1; then
            echo "Creating celery service..."
            sudo tee /etc/systemd/system/labmyshare-celery.service > /dev/null << 'CELERYEND'
          [Unit]
          Description=LabMyShare Celery Worker
          After=network.target postgresql.service redis.service
          Wants=postgresql.service redis.service
          
          [Service]
          Type=simple
          User=labmyshare
          Group=labmyshare
          WorkingDirectory=/var/www/labmyshare
          Environment=PATH=/var/www/labmyshare/venv/bin
          EnvironmentFile=/var/www/labmyshare/.env
          ExecStart=/var/www/labmyshare/venv/bin/celery -A labmyshare worker --loglevel=info --concurrency=4 --logfile=/var/www/labmyshare/logs/celery.log
          Restart=always
          RestartSec=3
          
          [Install]
          WantedBy=multi-user.target
          CELERYEND
            ENABLE_CELERY="yes"
            echo "Celery service created"
          else
            echo "Skipping Celery service (Redis not available)"
            ENABLE_CELERY="no"
          fi

          echo "Deployment script completed."
          EOF
          chmod +x deploy.sh

      - name: Copy and run deployment script
        run: |
          scp deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} "bash /tmp/deploy.sh"

      - name: Health Check
        run: |
          echo "Health check..."
          sleep 30

          if nc -z ${{ secrets.SERVER_HOST }} 8080; then
            echo "Port 8080 accessible"
          else
            echo "Port 8080 not accessible"
            exit 1
          fi

          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            if curl -f -m 15 "http://backend.beautyspabyshea.co.uk:8080/health/" 2>&1; then
              echo "Health check passed!"
              exit 0
            fi
            sleep 15
          done

          echo "Health checks failed"
          exit 1

      - name: Deployment Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment successful!"
          else
            echo "Deployment failed"
          fi
