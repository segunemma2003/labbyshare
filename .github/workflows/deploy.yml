name: Simple Deployment (No Docker)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: labmyshare2020
          POSTGRES_DB: labmyshare_db
          POSTGRES_USER: labmyshare
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov

      - name: Set up test environment
        run: |
          cp .env.example .env
          echo "DEBUG=True" >> .env
          echo "SECRET_KEY=test-secret-key" >> .env
          echo "DB_NAME=labmyshare_db" >> .env
          echo "DB_USER=labmyshare" >> .env
          echo "DB_PASSWORD=labmyshare2020" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "REDIS_URL=redis://localhost:6379/1" >> .env

      - name: Run tests
        run: |
          python manage.py migrate --run-syncdb
          python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    environment:
      name: production
      url: http://backend.beautyspabyshea.co.uk:8080

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Starting simple deployment (NO DOCKER)..."
          
          # Variables
          APP_DIR="/var/www/labmyshare"
          APP_USER="labmyshare"
          
          # Stop existing services
          echo "🛑 Stopping existing services..."
          sudo systemctl stop labmyshare-web || true
          sudo systemctl stop labmyshare-celery || true
          sudo systemctl stop labmyshare-celery-beat || true
          
          # Kill any remaining processes
          sudo pkill -f "gunicorn.*labmyshare" || true
          sudo pkill -f "celery.*labmyshare" || true
          
          # Create app user if not exists
          if ! id "$APP_USER" &>/dev/null; then
            echo "👤 Creating app user..."
            sudo useradd --system --home $APP_DIR --shell /bin/bash $APP_USER
          fi
          
          # Create app directory
          sudo mkdir -p $APP_DIR
          cd $APP_DIR
          
          # Fix git ownership issues
          echo "🔧 Fixing ownership issues..."
          sudo chown -R root:root $APP_DIR 2>/dev/null || true
          git config --global --add safe.directory $APP_DIR || true
          
          # Pull latest code
          echo "📥 Updating code..."
          if [ -d ".git" ]; then
            git fetch origin
            git reset --hard origin/main
          else
            git clone https://github.com/beautyspabyshea/labmyshare.git .
          fi
          
          # Fix ownership for app user
          sudo chown -R $APP_USER:$APP_USER $APP_DIR
          
          # Install system dependencies
          echo "🔧 Installing system dependencies..."
          sudo apt-get update
          sudo apt-get install -y python3 python3-venv python3-pip python3-dev
          sudo apt-get install -y postgresql postgresql-contrib libpq-dev
          sudo apt-get install -y nginx
          
          # Install Redis separately with better error handling
          echo "📦 Installing Redis..."
          sudo apt-get install -y redis-server redis-tools || {
            echo "⚠️ Redis installation failed, continuing without Redis..."
          }
          
          # Set up Python virtual environment
          echo "🐍 Setting up Python environment..."
          sudo rm -rf venv
          sudo -u $APP_USER python3 -m venv venv
          sudo -u $APP_USER ./venv/bin/pip install --upgrade pip setuptools wheel
          sudo -u $APP_USER ./venv/bin/pip install -r requirements.txt
          sudo -u $APP_USER ./venv/bin/pip install gunicorn psycopg2-binary
          
          # Configure PostgreSQL
          echo "🗄️ Setting up database..."
          sudo systemctl start postgresql
          sudo systemctl enable postgresql
          
          # Create database setup script
          cat > /tmp/setup_db.sql << 'SQLEND'
          DROP DATABASE IF EXISTS labmyshare_db;
          DROP USER IF EXISTS labmyshare;
          CREATE USER labmyshare WITH PASSWORD 'labmyshare2020';
          CREATE DATABASE labmyshare_db OWNER labmyshare;
          GRANT ALL PRIVILEGES ON DATABASE labmyshare_db TO labmyshare;
          SQLEND
          
          # Create schema permissions script
          cat > /tmp/setup_schema.sql << 'SCHEMAEND'
          GRANT ALL ON SCHEMA public TO labmyshare;
          GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO labmyshare;
          GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO labmyshare;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO labmyshare;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO labmyshare;
          ALTER SCHEMA public OWNER TO labmyshare;
          ALTER ROLE labmyshare SET client_encoding TO 'utf8';
          ALTER ROLE labmyshare SET default_transaction_isolation TO 'read committed';
          ALTER ROLE labmyshare SET timezone TO 'UTC';
          ALTER ROLE labmyshare CREATEDB;
          SCHEMAEND
          
          # Execute database setup
          echo "📋 Creating database and user..."
          sudo -u postgres psql -f /tmp/setup_db.sql
          
          echo "🔐 Setting up schema permissions..."
          sudo -u postgres psql -d labmyshare_db -f /tmp/setup_schema.sql
          
          # Clean up SQL files
          rm -f /tmp/setup_db.sql /tmp/setup_schema.sql
          
          # Test connection
          echo "🔌 Testing database connection..."
          if PGPASSWORD=labmyshare2020 psql -h localhost -U labmyshare -d labmyshare_db -c "SELECT 1;" >/dev/null 2>&1; then
            echo "✅ Database connection successful"
          else
            echo "❌ Database connection failed"
            exit 1
          fi
          
          # Configure Redis
          echo "🔴 Setting up Redis..."
          
          # Install Redis with proper configuration
          sudo apt-get install -y redis-server redis-tools
          
          # Fix Redis configuration issues
          sudo sed -i 's/^supervised no/supervised systemd/' /etc/redis/redis.conf || true
          sudo sed -i 's/^# maxmemory <bytes>/maxmemory 256mb/' /etc/redis/redis.conf || true
          sudo sed -i 's/^# maxmemory-policy noeviction/maxmemory-policy allkeys-lru/' /etc/redis/redis.conf || true
          
          # Create Redis user and group if they don't exist
          sudo groupadd redis 2>/dev/null || true
          sudo useradd -r -g redis redis 2>/dev/null || true
          
          # Fix Redis permissions
          sudo chown redis:redis /var/lib/redis
          sudo chmod 750 /var/lib/redis
          sudo chown redis:redis /etc/redis/redis.conf
          sudo chmod 640 /etc/redis/redis.conf
          
          # Enable and start Redis with error handling
          sudo systemctl daemon-reload
          sudo systemctl enable redis-server
          
          # Try to start Redis with debugging
          if ! sudo systemctl start redis-server; then
            echo "❌ Redis failed to start, checking logs..."
            sudo journalctl -u redis-server --no-pager -l
            echo "🔧 Trying alternative Redis setup..."
            
            # Kill any existing Redis processes
            sudo pkill redis-server || true
            
            # Start Redis manually as fallback
            sudo -u redis redis-server /etc/redis/redis.conf --daemonize yes || true
            sleep 2
            
            # Test if Redis is working
            if redis-cli ping; then
              echo "✅ Redis started manually"
            else
              echo "❌ Redis completely failed, continuing without it..."
            fi
          else
            echo "✅ Redis started successfully"
          fi
          
          # Test Redis connection
          redis-cli ping && echo "✅ Redis responding" || echo "⚠️ Redis not responding"
          
          # Create environment file
          echo "⚙️ Creating environment configuration..."
          
          # Check if Redis is working to set appropriate URLs
          if redis-cli ping >/dev/null 2>&1; then
            REDIS_URL="redis://localhost:6379/1"
            CELERY_BROKER="redis://localhost:6379/0"
            CELERY_BACKEND="redis://localhost:6379/0"
            echo "✅ Using Redis for caching and Celery"
          else
            REDIS_URL="dummy://localhost"
            CELERY_BROKER="memory://localhost"
            CELERY_BACKEND="cache+memory://localhost"
            echo "⚠️ Redis not available, using fallback configuration"
          fi
          
          sudo tee $APP_DIR/.env > /dev/null << ENVEND
          SECRET_KEY=ghfjgk.hl;iogulfkydjtxfgcvjbk.hllfkdtjxgchvjgkifuydcghvjgv
          DEBUG=False
          ALLOWED_HOSTS=backend.beautyspabyshea.co.uk,localhost,127.0.0.1
          DB_NAME=labmyshare_db
          DB_USER=labmyshare
          DB_PASSWORD=labmyshare2020
          DB_HOST=localhost
          DB_PORT=5432
          REDIS_URL=${REDIS_URL}
          CELERY_BROKER_URL=${CELERY_BROKER}
          CELERY_RESULT_BACKEND=${CELERY_BACKEND}
          EMAIL_HOST=smtp.resend.com
          EMAIL_PORT=587
          EMAIL_HOST_USER=resend
          EMAIL_HOST_PASSWORD=re_ZBwZZ2tj_AMtGvcpxoa1DofEXdV3BKM2f
          DEFAULT_FROM_EMAIL=noreply@beautyspabyshea.co.uk
          STATIC_ROOT=/var/www/labmyshare/staticfiles
          STATIC_URL=/static/
          MEDIA_ROOT=/var/www/labmyshare/media
          MEDIA_URL=/media/
          ENVEND
          
          # Set permissions
          sudo chown $APP_USER:$APP_USER $APP_DIR/.env
          sudo chmod 600 $APP_DIR/.env
          
          # Create directories
          echo "📁 Creating application directories..."
          sudo -u $APP_USER mkdir -p static media logs staticfiles
          
          # Set proper permissions for static and media directories
          sudo chmod 755 $APP_DIR/static $APP_DIR/media $APP_DIR/staticfiles $APP_DIR/logs
          sudo chown -R $APP_USER:$APP_USER $APP_DIR/static $APP_DIR/media $APP_DIR/staticfiles $APP_DIR/logs
          
          # Run Django setup
          echo "⚙️ Django setup..."
          
          # Test Django database connection first
          echo "🔌 Testing Django database connection..."
          if ! sudo -u $APP_USER ./venv/bin/python manage.py check --database default; then
            echo "❌ Django database connection failed"
            echo "🔍 Django database settings:"
            sudo -u $APP_USER ./venv/bin/python manage.py shell -c "from django.conf import settings; print('Database settings:', settings.DATABASES['default'])"
            exit 1
          fi
          echo "✅ Django database connection successful"
          
          # Check Django static files configuration
          echo "📦 Checking Django static files configuration..."
          sudo -u $APP_USER ./venv/bin/python manage.py shell << 'CHECKSTATIC'
          from django.conf import settings
          import os
          print(f"STATIC_ROOT: {getattr(settings, 'STATIC_ROOT', 'NOT SET')}")
          print(f"STATIC_URL: {getattr(settings, 'STATIC_URL', 'NOT SET')}")
          print(f"STATICFILES_DIRS: {getattr(settings, 'STATICFILES_DIRS', 'NOT SET')}")
          if hasattr(settings, 'STATIC_ROOT') and settings.STATIC_ROOT:
              static_root = str(settings.STATIC_ROOT)
              print(f"STATIC_ROOT directory exists: {os.path.exists(static_root)}")
              if os.path.exists(static_root):
                  print(f"STATIC_ROOT is writable: {os.access(static_root, os.W_OK)}")
          CHECKSTATIC
          
          # Run migrations with verbose output
          echo "📊 Running database migrations..."
          if ! sudo -u $APP_USER ./venv/bin/python manage.py migrate --noinput --verbosity=2; then
            echo "❌ Migrations failed"
            echo "🔍 Checking database permissions..."
            PGPASSWORD=labmyshare2020 psql -h localhost -U labmyshare -d labmyshare_db -c "\dp" || true
            exit 1
          fi
          echo "✅ Migrations completed successfully"
          
          # Collect static files with error handling
          echo "📦 Collecting static files..."
          
          # Try collecting static files with the current configuration
          if ! sudo -u $APP_USER ./venv/bin/python manage.py collectstatic --noinput --verbosity=2; then
            echo "❌ Static files collection failed with environment variables"
            echo "🔧 Trying fallback approach - modifying settings.py directly..."
            
            # Create a backup of settings.py
            sudo -u $APP_USER cp $APP_DIR/labmyshare/settings.py $APP_DIR/labmyshare/settings.py.backup
            
            # Add static settings directly to the end of settings.py (override any existing)
            sudo -u $APP_USER tee -a $APP_DIR/labmyshare/settings.py << 'FALLBACKSTATIC'
            # Override static files settings for deployment
            import os
            from pathlib import Path
            
            # Force static files configuration
            STATIC_ROOT = '/var/www/labmyshare/staticfiles'
            STATIC_URL = '/static/'
            MEDIA_ROOT = '/var/www/labmyshare/media'
            MEDIA_URL = '/media/'
            
            # Ensure directories exist
            os.makedirs(STATIC_ROOT, exist_ok=True)
            os.makedirs(MEDIA_ROOT, exist_ok=True)
            
            print(f"🔧 STATIC_ROOT forced to: {STATIC_ROOT}")
            FALLBACKSTATIC

            
            echo "✅ Added fallback static configuration to settings.py"
            
            # Try collecting static files again
            echo "📦 Retrying static files collection..."
            if ! sudo -u $APP_USER ./venv/bin/python manage.py collectstatic --noinput --verbosity=2; then
              echo "❌ Static files collection still failed"
              echo "🔍 Final debugging..."
              
              # Show current Django settings
              sudo -u $APP_USER ./venv/bin/python manage.py shell -c "from django.conf import settings; print('STATIC_ROOT:', getattr(settings, 'STATIC_ROOT', 'NONE')); print('STATICFILES_DIRS:', getattr(settings, 'STATICFILES_DIRS', 'NONE'))"
              
              # Try to manually check staticfiles app
              sudo -u $APP_USER ./venv/bin/python manage.py shell -c "from django.conf import settings; print('INSTALLED_APPS contains staticfiles:', 'django.contrib.staticfiles' in settings.INSTALLED_APPS)"
              
              # Show directory structure
              sudo -u $APP_USER ls -la $APP_DIR/staticfiles/
              
              # Continue deployment without static files as last resort
              echo "⚠️ Continuing deployment without static files collection..."
            else
              echo "✅ Static files collected successfully with fallback configuration"
            fi
          else
            echo "✅ Static files collected successfully"
          fi
          
          # Create superuser
          echo "👤 Creating superuser..."
          echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(email='admin@labmyshare.com').exists() or User.objects.create_superuser('admin', 'admin@labmyshare.com', 'admin123')" | sudo -u $APP_USER ./venv/bin/python manage.py shell
          
          # Create web service
          echo "🌐 Creating web service..."
          sudo tee /etc/systemd/system/labmyshare-web.service > /dev/null << 'WEBEND'
          [Unit]
          Description=LabMyShare Web Service
          After=network.target postgresql.service redis.service
          Wants=postgresql.service redis.service
          
          [Service]
          Type=notify
          User=labmyshare
          Group=labmyshare
          WorkingDirectory=/var/www/labmyshare
          Environment=PATH=/var/www/labmyshare/venv/bin
          EnvironmentFile=/var/www/labmyshare/.env
          ExecStart=/var/www/labmyshare/venv/bin/gunicorn labmyshare.wsgi:application --bind 127.0.0.1:8001 --workers 4 --threads 2 --timeout 120 --access-logfile /var/www/labmyshare/logs/access.log --error-logfile /var/www/labmyshare/logs/error.log
          ExecReload=/bin/kill -s HUP $MAINPID
          Restart=always
          RestartSec=3
          
          [Install]
          WantedBy=multi-user.target
          WEBEND
          
          # Create celery service (only if Redis is working)
          if redis-cli ping >/dev/null 2>&1; then
            echo "🔄 Creating celery service..."
            sudo tee /etc/systemd/system/labmyshare-celery.service > /dev/null << 'CELERYEND'
              [Unit]
              Description=LabMyShare Celery Worker
              After=network.target postgresql.service redis.service
              Wants=postgresql.service redis.service
              
              [Service]
              Type=simple
              User=labmyshare
              Group=labmyshare
              WorkingDirectory=/var/www/labmyshare
              Environment=PATH=/var/www/labmyshare/venv/bin
              EnvironmentFile=/var/www/labmyshare/.env
              ExecStart=/var/www/labmyshare/venv/bin/celery -A labmyshare worker --loglevel=info --concurrency=4 --logfile=/var/www/labmyshare/logs/celery.log
              Restart=always
              RestartSec=3
              
              [Install]
              WantedBy=multi-user.target
              CELERYEND
            ENABLE_CELERY="yes"
            echo "✅ Celery service created"
          else
            echo "⚠️ Skipping Celery service (Redis not available)"
            ENABLE_CELERY="no"
          fi
          
          # Create nginx config
          echo "🌐 Configuring nginx..."
          sudo tee /etc/nginx/sites-available/labmyshare > /dev/null << 'NGINXEND'
          server {
              listen 8080;
              server_name backend.beautyspabyshea.co.uk localhost;
              
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;
              
              location / {
                  proxy_pass http://127.0.0.1:8001;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 60s;
                  proxy_read_timeout 60s;
              }
              
              location /static/ {
                  alias /var/www/labmyshare/staticfiles/;
                  expires 30d;
                  add_header Cache-Control "public, immutable";
              }
              
              location /media/ {
                  alias /var/www/labmyshare/media/;
                  expires 7d;
                  add_header Cache-Control "public";
              }
          }
          NGINXEND
          
          # Enable nginx site
          sudo ln -sf /etc/nginx/sites-available/labmyshare /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo nginx -t
          
          # Configure firewall
          echo "🔥 Configuring firewall..."
          sudo ufw allow 22/tcp
          sudo ufw allow 8080/tcp
          sudo ufw --force enable
          
          # Start services
          echo "🚀 Starting services..."
          sudo systemctl daemon-reload
          
          # Always enable and start web and nginx
          sudo systemctl enable labmyshare-web nginx
          sudo systemctl start labmyshare-web
          sudo systemctl restart nginx
          
          # Only start Celery if Redis is working
          if [ "$ENABLE_CELERY" = "yes" ]; then
            sudo systemctl enable labmyshare-celery
            sudo systemctl start labmyshare-celery
            echo "✅ Started web, nginx, and celery services"
          else
            echo "✅ Started web and nginx services (Celery skipped)"
          fi
          
          # Wait and test
          sleep 10
          echo "🔍 Testing connectivity..."
          curl -f http://localhost:8001/health/ && echo "✅ Django OK" || echo "❌ Django FAIL"
          curl -f http://localhost:8080/health/ && echo "✅ Nginx OK" || echo "❌ Nginx FAIL"
          
          echo "✅ Simple deployment completed!"
          EOF
          
          chmod +x deploy.sh

      - name: Copy and run deployment script
        run: |
          scp deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} "bash /tmp/deploy.sh"

      - name: Health Check
        run: |
          echo "🔍 Health check..."
          sleep 30
          
          if nc -z ${{ secrets.SERVER_HOST }} 8080; then
            echo "✅ Port 8080 accessible"
          else
            echo "❌ Port 8080 not accessible"
            exit 1
          fi
          
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            if curl -f -m 15 "http://backend.beautyspabyshea.co.uk:8080/health/" 2>&1; then
              echo "✅ Health check passed!"
              exit 0
            fi
            sleep 15
          done
          
          echo "❌ Health checks failed"
          exit 1

      - name: Deployment Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Simple deployment successful!"
            echo "🌐 Application: http://backend.beautyspabyshea.co.uk:8080"
            echo "🔍 Health: http://backend.beautyspabyshea.co.uk:8080/health/"
            echo "📚 API docs: http://backend.beautyspabyshea.co.uk:8080/swagger/"
            echo "👨‍💼 Admin: http://backend.beautyspabyshea.co.uk:8080/admin/"
            echo "📊 Status: sudo systemctl status labmyshare-web"
          else
            echo "❌ Simple deployment failed"
          fi
