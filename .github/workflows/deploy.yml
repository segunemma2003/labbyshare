name: Simple Deployment (No Docker)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: labmyshare2020
          POSTGRES_DB: labmyshare_db
          POSTGRES_USER: labmyshare
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov

      - name: Set up test environment
        run: |
          cp .env.example .env
          echo "DEBUG=True" >> .env
          echo "SECRET_KEY=test-secret-key" >> .env
          echo "DB_NAME=labmyshare_db" >> .env
          echo "DB_USER=labmyshare" >> .env
          echo "DB_PASSWORD=labmyshare2020" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "REDIS_URL=redis://localhost:6379/1" >> .env

      - name: Run tests
        run: |
          python manage.py migrate --run-syncdb
          python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    environment:
      name: production
      url: http://backend.beautyspabyshea.co.uk:8080

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Production Server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} 'bash -s' << 'DEPLOY_SCRIPT'
            set -e
            
            echo "üöÄ Starting simple deployment (NO DOCKER)..."
            
            # Variables
            APP_DIR="/var/www/labmyshare"
            APP_USER="labmyshare"
            PYTHON_PATH="/var/www/labmyshare/venv/bin/python"
            PIP_PATH="/var/www/labmyshare/venv/bin/pip"
            
            # Stop existing services
            echo "üõë Stopping existing services..."
            sudo systemctl stop labmyshare-web || echo "Web service not running"
            sudo systemctl stop labmyshare-celery || echo "Celery service not running"
            sudo systemctl stop labmyshare-celery-beat || echo "Celery beat not running"
            
            # Kill any remaining processes
            sudo pkill -f "gunicorn.*labmyshare" || echo "No gunicorn processes"
            sudo pkill -f "celery.*labmyshare" || echo "No celery processes"
            
            # Create app user if not exists
            if ! id "$APP_USER" &>/dev/null; then
              echo "üë§ Creating app user..."
              sudo useradd --system --home $APP_DIR --shell /bin/bash $APP_USER
            fi
            
            # Create app directory and handle ownership
            sudo mkdir -p $APP_DIR
            cd $APP_DIR
            
            # Fix any existing ownership issues
            echo "üîß Fixing ownership issues..."
            sudo chown -R root:root $APP_DIR 2>/dev/null || true
            
            # Pull latest code as root first, then fix ownership
            echo "üì• Updating code..."
            if [ -d ".git" ]; then
              # Fix git safe directory issue
              git config --global --add safe.directory $APP_DIR
              git fetch origin
              git reset --hard origin/main
            else
              # Clone fresh
              git clone https://github.com/beautyspabyshea/labmyshare.git .
            fi
            
            # Now fix ownership for app user
            sudo chown -R $APP_USER:$APP_USER $APP_DIR
            
            # Set up Python virtual environment
            echo "üêç Setting up Python environment..."
            
            # Install Python3 and venv if not present
            sudo apt-get update
            sudo apt-get install -y python3 python3-venv python3-pip python3-dev
            
            # Remove old venv if exists and recreate
            sudo rm -rf venv
            sudo -u $APP_USER python3 -m venv venv
            
            # Make sure pip is up to date
            sudo -u $APP_USER $PIP_PATH install --upgrade pip setuptools wheel
            
            # Install/update dependencies
            echo "üì¶ Installing dependencies..."
            sudo -u $APP_USER $PIP_PATH install -r requirements.txt
            sudo -u $APP_USER $PIP_PATH install gunicorn psycopg2-binary
            
            # Install system dependencies if needed
            echo "üîß Installing system dependencies..."
            sudo apt-get update
            sudo apt-get install -y postgresql postgresql-contrib redis-server nginx python3-dev libpq-dev
            
            # Configure PostgreSQL
            echo "üóÑÔ∏è Setting up database..."
            sudo systemctl start postgresql
            sudo systemctl enable postgresql
            
            # Create database and user (ignore errors if already exists)
            sudo -u postgres psql << 'EOF'
            DO \$\$
            BEGIN
                IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'labmyshare') THEN
                    CREATE USER labmyshare WITH PASSWORD 'labmyshare2020';
                END IF;
                
                IF NOT EXISTS (SELECT FROM pg_database WHERE datname = 'labmyshare_db') THEN
                    CREATE DATABASE labmyshare_db OWNER labmyshare;
                END IF;
                
                ALTER ROLE labmyshare SET client_encoding TO 'utf8';
                ALTER ROLE labmyshare SET default_transaction_isolation TO 'read committed';
                ALTER ROLE labmyshare SET timezone TO 'UTC';
                GRANT ALL PRIVILEGES ON DATABASE labmyshare_db TO labmyshare;
            END
            \$\$;
            EOF
            
            # Configure Redis
            echo "üî¥ Setting up Redis..."
            sudo systemctl start redis-server
            sudo systemctl enable redis-server
            
            # Create environment file
            echo "‚öôÔ∏è Creating environment configuration..."
            sudo tee $APP_DIR/.env > /dev/null << 'ENV_FILE'
          SECRET_KEY=ghfjgk.hl;iogulfkydjtxfgcvjbk.hllfkdtjxgchvjgkifuydcghvjgv
          DEBUG=False
          ALLOWED_HOSTS=backend.beautyspabyshea.co.uk,localhost,127.0.0.1
          
          DB_NAME=labmyshare_db
          DB_USER=labmyshare
          DB_PASSWORD=labmyshare2020
          DB_HOST=localhost
          DB_PORT=5432
          
          REDIS_URL=redis://localhost:6379/1
          CELERY_BROKER_URL=redis://localhost:6379/0
          CELERY_RESULT_BACKEND=redis://localhost:6379/0
          
          EMAIL_HOST=smtp.resend.com
          EMAIL_PORT=587
          EMAIL_HOST_USER=resend
          EMAIL_HOST_PASSWORD=re_ZBwZZ2tj_AMtGvcpxoa1DofEXdV3BKM2f
          DEFAULT_FROM_EMAIL=noreply@beautyspabyshea.co.uk
          ENV_FILE
            
            # Create directories and fix all permissions
            echo "üìÅ Creating directories and fixing permissions..."
            sudo -u $APP_USER mkdir -p static media logs
            sudo chown -R $APP_USER:$APP_USER $APP_DIR
            sudo chmod -R 755 $APP_DIR
            sudo chmod 600 $APP_DIR/.env
            
            # Run Django setup
            echo "‚öôÔ∏è Django setup..."
            cd $APP_DIR
            sudo -u $APP_USER $PYTHON_PATH manage.py migrate --noinput
            sudo -u $APP_USER $PYTHON_PATH manage.py collectstatic --noinput
            
            # Create superuser
            sudo -u $APP_USER $PYTHON_PATH manage.py shell << 'PYTHON_SCRIPT'
          from django.contrib.auth import get_user_model
          User = get_user_model()
          if not User.objects.filter(email='admin@labmyshare.com').exists():
              User.objects.create_superuser('admin', 'admin@labmyshare.com', 'admin123')
              print("Superuser created")
          else:
              print("Superuser already exists")
          PYTHON_SCRIPT
            
            # Create systemd service for web
            echo "üåê Creating web service..."
            sudo tee /etc/systemd/system/labmyshare-web.service > /dev/null << 'WEB_SERVICE'
          [Unit]
          Description=LabMyShare Web Service
          After=network.target postgresql.service redis.service
          Wants=postgresql.service redis.service
          
          [Service]
          Type=notify
          User=labmyshare
          Group=labmyshare
          WorkingDirectory=/var/www/labmyshare
          Environment=PATH=/var/www/labmyshare/venv/bin
          EnvironmentFile=/var/www/labmyshare/.env
          ExecStart=/var/www/labmyshare/venv/bin/gunicorn labmyshare.wsgi:application \
            --bind 127.0.0.1:8001 \
            --workers 4 \
            --threads 2 \
            --timeout 120 \
            --max-requests 1000 \
            --max-requests-jitter 100 \
            --access-logfile /var/www/labmyshare/logs/access.log \
            --error-logfile /var/www/labmyshare/logs/error.log \
            --log-level info
          ExecReload=/bin/kill -s HUP $MAINPID
          Restart=always
          RestartSec=3
          
          [Install]
          WantedBy=multi-user.target
          WEB_SERVICE
            
            # Create systemd service for celery
            echo "üîÑ Creating celery service..."
            sudo tee /etc/systemd/system/labmyshare-celery.service > /dev/null << 'CELERY_SERVICE'
          [Unit]
          Description=LabMyShare Celery Worker
          After=network.target postgresql.service redis.service
          Wants=postgresql.service redis.service
          
          [Service]
          Type=forking
          User=labmyshare
          Group=labmyshare
          WorkingDirectory=/var/www/labmyshare
          Environment=PATH=/var/www/labmyshare/venv/bin
          EnvironmentFile=/var/www/labmyshare/.env
          ExecStart=/var/www/labmyshare/venv/bin/celery -A labmyshare worker \
            --loglevel=info \
            --concurrency=4 \
            --logfile=/var/www/labmyshare/logs/celery.log \
            --detach
          ExecStop=/var/www/labmyshare/venv/bin/celery -A labmyshare control shutdown
          ExecReload=/var/www/labmyshare/venv/bin/celery -A labmyshare control restart
          Restart=always
          RestartSec=3
          
          [Install]
          WantedBy=multi-user.target
          CELERY_SERVICE
            
            # Create systemd service for celery beat
            echo "‚è∞ Creating celery beat service..."
            sudo tee /etc/systemd/system/labmyshare-celery-beat.service > /dev/null << 'BEAT_SERVICE'
          [Unit]
          Description=LabMyShare Celery Beat
          After=network.target postgresql.service redis.service
          Wants=postgresql.service redis.service
          
          [Service]
          Type=simple
          User=labmyshare
          Group=labmyshare
          WorkingDirectory=/var/www/labmyshare
          Environment=PATH=/var/www/labmyshare/venv/bin
          EnvironmentFile=/var/www/labmyshare/.env
          ExecStart=/var/www/labmyshare/venv/bin/celery -A labmyshare beat \
            --loglevel=info \
            --logfile=/var/www/labmyshare/logs/celery-beat.log \
            --scheduler django_celery_beat.schedulers:DatabaseScheduler
          Restart=always
          RestartSec=3
          
          [Install]
          WantedBy=multi-user.target
          BEAT_SERVICE
            
            # Configure nginx
            echo "üåê Configuring nginx..."
            sudo tee /etc/nginx/sites-available/labmyshare << 'NGINX_CONFIG'
          server {
              listen 8080;
              server_name backend.beautyspabyshea.co.uk localhost;
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;
              
              # Main application
              location / {
                  proxy_pass http://127.0.0.1:8001;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 60s;
                  proxy_read_timeout 60s;
              }
              
              # Static files
              location /static/ {
                  alias /var/www/labmyshare/static/;
                  expires 30d;
                  add_header Cache-Control "public, immutable";
              }
              
              # Media files
              location /media/ {
                  alias /var/www/labmyshare/media/;
                  expires 7d;
                  add_header Cache-Control "public";
              }
          }
          NGINX_CONFIG
            
            # Enable nginx site
            sudo ln -sf /etc/nginx/sites-available/labmyshare /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            
            # Test nginx config
            sudo nginx -t
            
            # Configure firewall
            echo "üî• Configuring firewall..."
            sudo ufw allow 22/tcp
            sudo ufw allow 8080/tcp
            sudo ufw --force enable
            
            # Reload systemd and start services
            echo "üöÄ Starting services..."
            sudo systemctl daemon-reload
            
            # Start services
            sudo systemctl start labmyshare-web
            sudo systemctl start labmyshare-celery
            sudo systemctl start labmyshare-celery-beat
            sudo systemctl restart nginx
            
            # Enable services to start on boot
            sudo systemctl enable labmyshare-web
            sudo systemctl enable labmyshare-celery
            sudo systemctl enable labmyshare-celery-beat
            sudo systemctl enable nginx
            
            # Wait for services to start
            sleep 10
            
            # Check service status
            echo "üìä Service status:"
            sudo systemctl status labmyshare-web --no-pager -l
            sudo systemctl status nginx --no-pager -l
            
            # Test internal connectivity
            echo "üîç Testing connectivity..."
            curl -f http://localhost:8001/health/ && echo "‚úÖ Django OK" || echo "‚ùå Django FAIL"
            curl -f http://localhost:8080/health/ && echo "‚úÖ Nginx OK" || echo "‚ùå Nginx FAIL"
            
            echo "‚úÖ Simple deployment completed!"
            echo "üåê Application: http://backend.beautyspabyshea.co.uk:8080"
            echo "üë®‚Äçüíº Admin: http://backend.beautyspabyshea.co.uk:8080/admin/"
            echo "üìö API docs: http://backend.beautyspabyshea.co.uk:8080/swagger/"
          DEPLOY_SCRIPT

      - name: Health Check
        run: |
          echo "üîç Health check..."
          
          # Wait for services to stabilize
          sleep 30
          
          # Test connectivity
          if nc -z ${{ secrets.SERVER_HOST }} 8080; then
            echo "‚úÖ Port 8080 accessible"
          else
            echo "‚ùå Port 8080 not accessible"
            exit 1
          fi
          
          # Test endpoints
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            if curl -f -m 15 "http://backend.beautyspabyshea.co.uk:8080/health/" 2>&1; then
              echo "‚úÖ Health check passed!"
              exit 0
            fi
            sleep 15
          done
          
          echo "‚ùå Health checks failed"
          exit 1

      - name: Deployment Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Simple deployment successful!"
            echo "üåê Application: http://backend.beautyspabyshea.co.uk:8080"
            echo "üîç Health: http://backend.beautyspabyshea.co.uk:8080/health/"
            echo "üìö API docs: http://backend.beautyspabyshare.co.uk:8080/swagger/"
            echo "üë®‚Äçüíº Admin: http://backend.beautyspabyshea.co.uk:8080/admin/"
            echo "üìä Status: sudo systemctl status labmyshare-web"
          else
            echo "‚ùå Simple deployment failed"
          fi
