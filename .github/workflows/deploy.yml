name: Deploy to Production

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: labmyshare2020
          POSTGRES_DB: labmyshare_db
          POSTGRES_USER: labmyshare
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov

      - name: Set up test environment
        run: |
          cp .env.example .env
          echo "DEBUG=True" >> .env
          echo "SECRET_KEY=test-secret-key-for-github-actions" >> .env
          echo "DB_NAME=labmyshare_db" >> .env
          echo "DB_USER=labmyshare" >> .env
          echo "DB_PASSWORD=labmyshare2020" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "REDIS_URL=redis://localhost:6379/1" >> .env
          echo "CELERY_BROKER_URL=redis://localhost:6379/0" >> .env
          echo "CELERY_RESULT_BACKEND=redis://localhost:6379/0" >> .env

      - name: Run migrations
        run: |
          python manage.py migrate --run-syncdb

      - name: Run tests
        run: |
          python manage.py test
          # Uncomment if you have pytest tests
          # pytest --cov=. --cov-report=xml

      - name: Upload coverage reports
        if: success()
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    environment:
      name: production
      url: http://backend.beautyspabyshea.co.uk:8080

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment script
        run: |
          cat > deploy.sh << 'SCRIPT_EOF'
          #!/bin/bash
          set -e
          
          # Navigate to application directory
          cd /var/www/labmyshare
          
          # Create backup of current deployment
          if [ -f docker-compose.yml ]; then
            cp docker-compose.yml docker-compose.yml.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Pull latest changes from repository
          git fetch origin
          git reset --hard origin/main
          
          # Create directories
          mkdir -p docker/nginx accounts/management/commands
          
          # Create basic nginx config
          echo 'user nginx;
          worker_processes auto;
          error_log /var/log/nginx/error.log warn;
          pid /var/run/nginx.pid;
          events {
            worker_connections 1024;
          }
          http {
            include /etc/nginx/mime.types;
            default_type application/octet-stream;
            sendfile on;
            keepalive_timeout 65;
            include /etc/nginx/conf.d/*.conf;
          }' > docker/nginx/nginx.conf
          
          # Create HTTP-only nginx config
          echo 'upstream labmyshare {
            server web:8000;
          }
          server {
            listen 80;
            server_name backend.beautyspabyshea.co.uk localhost;
            location / {
              proxy_pass http://labmyshare;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
            }
            location /health/ {
              proxy_pass http://labmyshare;
              access_log off;
            }
            location /static/ {
              alias /var/www/static/;
              expires 30d;
            }
            location /media/ {
              alias /var/www/media/;
              expires 7d;
            }
          }' > docker/nginx/http-only.conf
          
          # Create management command files
          touch accounts/management/__init__.py
          touch accounts/management/commands/__init__.py
          
          # Create management command
          echo 'from django.core.management.base import BaseCommand
          from django.contrib.auth import get_user_model
          from django.db import transaction
          
          User = get_user_model()
          
          class Command(BaseCommand):
              help = "Create initial data"
              
              def handle(self, *args, **options):
                  try:
                      admin_email = "admin@labmyshare.com"
                      if not User.objects.filter(email=admin_email).exists():
                          User.objects.create_superuser(
                              username="admin",
                              email=admin_email,
                              password="admin123"
                          )
                          print("Superuser created")
                      else:
                          print("Superuser already exists")
                  except Exception as e:
                      print(f"Error: {e}")' > accounts/management/commands/create_initial_data.py
          
          SCRIPT_EOF
          
          chmod +x deploy.sh

      - name: Copy deployment script to server
        run: |
          scp deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }}:/tmp/deploy.sh

      - name: Deploy to server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # Run the deployment script
            bash /tmp/deploy.sh
            
            # Navigate to app directory
            cd /var/www/labmyshare
            
            # Create clean .env file
            cat > .env << 'ENVEOF'
          SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          DEBUG=False
          ALLOWED_HOSTS=backend.beautyspabyshea.co.uk,localhost,127.0.0.1
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          REDIS_URL=${{ secrets.REDIS_URL }}
          CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}
          CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }}
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}
          GITHUB_REPOSITORY=${{ github.repository }}
          ENVEOF
            
            # Clean any problematic lines
            sed -i '/echo.*docker/d' .env 2>/dev/null || true
            sed -i '/docker login/d' .env 2>/dev/null || true
            
            # Docker login
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            
            # Copy production compose file
            cp docker-compose.production.yml docker-compose.yml
            
            # Create storage directories
            chmod +x docker/scripts/init-storage.sh
            ./docker/scripts/init-storage.sh
            
            # Complete cleanup - force stop everything using those ports
            docker compose down -v --remove-orphans || true
            docker stop $(docker ps -q) 2>/dev/null || true
            docker container prune -f
            docker image prune -f
            
            # Kill any processes using ports 8000 and 8080
            sudo fuser -k 8000/tcp 2>/dev/null || true
            sudo fuser -k 8080/tcp 2>/dev/null || true
            
            # Wait a moment for cleanup
            sleep 10
            
            # Pull and start
            docker compose pull
            docker compose up -d --remove-orphans
            
            # Wait for startup
            sleep 45
            
            # Run setup commands
            docker compose exec -T web python manage.py migrate || echo "Migration failed"
            docker compose exec -T web python manage.py collectstatic --noinput || echo "Static failed"
            docker compose exec -T web python manage.py create_initial_data || echo "Initial data failed"
            
            # Final restart
            docker compose restart nginx web
            
            # Cleanup
            docker image prune -af --filter "until=24h"
            rm /tmp/deploy.sh
            
            echo "Deployment completed successfully!"
          EOF

      - name: Health Check
        run: |
          sleep 60
          for i in {1..5}; do
            if curl -f http://backend.beautyspabyshea.co.uk:8080/health/; then
              echo "Health check passed"
              exit 0
            fi
            echo "Health check failed, attempt $i/5"
            sleep 10
          done
          echo "Health check failed after 5 attempts"
          exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful to http://backend.beautyspabyshea.co.uk:8080"
          else
            echo "❌ Deployment failed"
          fi

  cleanup:
    needs: deploy
    runs-on: ubuntu-latest
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Clean up old images
        run: |
          gh api --method GET \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/user/packages/container/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')/versions" \
            --field per_page=100 | \
          jq -r '.[5:] | .[].id' | \
          head -20 | \
          xargs -I {} gh api --method DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/user/packages/container/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')/versions/{}" || echo "Cleanup completed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
