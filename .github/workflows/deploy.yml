name: Simple Non-Docker Deployment

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: labmyshare2020
          POSTGRES_DB: labmyshare_db
          POSTGRES_USER: labmyshare
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov

      - name: Set up test environment
        run: |
          cp .env.example .env
          echo "DEBUG=True" >> .env
          echo "SECRET_KEY=test-secret-key" >> .env
          echo "DB_NAME=labmyshare_db" >> .env
          echo "DB_USER=labmyshare" >> .env
          echo "DB_PASSWORD=labmyshare2020" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "REDIS_URL=redis://localhost:6379/1" >> .env

      - name: Run tests
        run: |
          python manage.py migrate --run-syncdb
          python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    environment:
      name: production
      url: http://backend.beautyspabyshea.co.uk:8000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "🚀 Starting Simple LabMyShare Deployment (No Docker)..."

          # Configuration
          APP_DIR="/var/www/labmyshare"
          REPO_URL="https://github.com/beautyspabyshea/labmyshare.git"
          BRANCH="main"
          SERVICE_NAME="labmyshare"
          VENV_DIR="$APP_DIR/venv"
          
          # Create application directory
          sudo mkdir -p $APP_DIR
          sudo chown -R $USER:$USER $APP_DIR

          # Install system dependencies
          echo "📦 Installing system dependencies..."
          sudo apt-get update
          sudo apt-get install -y \
            python3 \
            python3-pip \
            python3-venv \
            python3-dev \
            postgresql \
            postgresql-contrib \
            redis-server \
            nginx \
            supervisor \
            git \
            curl \
            build-essential \
            libpq-dev

          # Clone or update repository
          if [ ! -d "$APP_DIR/.git" ]; then
            echo "📥 Cloning repository..."
            git clone $REPO_URL $APP_DIR
          else
            echo "🔄 Updating repository..."
            cd $APP_DIR
            git fetch origin
            git reset --hard origin/$BRANCH
          fi

          cd $APP_DIR

          # Create virtual environment
          echo "🐍 Setting up Python virtual environment..."
          if [ ! -d "$VENV_DIR" ]; then
            python3 -m venv $VENV_DIR
          fi

          # Activate virtual environment and install dependencies
          source $VENV_DIR/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

          # Setup environment file
          if [ ! -f ".env" ]; then
            echo "⚙️ Setting up environment file..."
            cp .env.production .env
            
            # Update database settings for local PostgreSQL
            sed -i 's/DB_HOST=db/DB_HOST=localhost/' .env
            sed -i 's/redis:\/\/redis:/redis:\/\/localhost:/' .env
          fi

          # Setup PostgreSQL database
          echo "🗄️ Setting up PostgreSQL database..."
          sudo -u postgres psql -c "CREATE DATABASE labmyshare_db;" 2>/dev/null || echo "Database already exists"
          sudo -u postgres psql -c "CREATE USER labmyshare WITH PASSWORD 'labmyshare2020';" 2>/dev/null || echo "User already exists"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE labmyshare_db TO labmyshare;" 2>/dev/null || echo "Privileges already granted"
          sudo -u postgres psql -c "ALTER USER labmyshare CREATEDB;" 2>/dev/null || echo "User already has CREATEDB"

          # Start services
          echo "🔧 Starting PostgreSQL and Redis..."
          sudo systemctl enable postgresql
          sudo systemctl start postgresql
          sudo systemctl enable redis-server
          sudo systemctl start redis-server

          # Run Django setup
          echo "📊 Running Django migrations..."
          source $VENV_DIR/bin/activate
          python manage.py migrate --noinput

          echo "📦 Collecting static files..."
          python manage.py collectstatic --noinput

          echo "👤 Creating superuser..."
          python manage.py shell << PYTHON_EOF
          from accounts.models import User
          if not User.objects.filter(email='admin@labmyshare.com').exists():
              User.objects.create_superuser(
                  username='admin',
                  email='admin@labmyshare.com',
                  password='admin123',
                  first_name='Admin',
                  last_name='User'
              )
              print('Superuser created: admin@labmyshare.com / admin123')
          else:
              print('Superuser already exists')
          PYTHON_EOF

          # Create Gunicorn configuration
          echo "🌐 Setting up Gunicorn..."
          cat > $APP_DIR/gunicorn.conf.py << GUNICORN_EOF
          bind = "0.0.0.0:8000"
          workers = 4
          worker_class = "sync"
          worker_connections = 1000
          max_requests = 1000
          max_requests_jitter = 100
          timeout = 30
          keepalive = 2
          user = "$USER"
          group = "$USER"
          tmp_upload_dir = None
          errorlog = "$APP_DIR/logs/gunicorn_error.log"
          accesslog = "$APP_DIR/logs/gunicorn_access.log"
          loglevel = "info"
          GUNICORN_EOF

          # Create logs directory
          mkdir -p $APP_DIR/logs

          # Setup Supervisor for process management
          echo "👨‍💼 Setting up Supervisor..."
          sudo tee /etc/supervisor/conf.d/labmyshare.conf > /dev/null << SUPERVISOR_EOF
          [program:labmyshare-web]
          command=$VENV_DIR/bin/gunicorn labmyshare.wsgi:application -c $APP_DIR/gunicorn.conf.py
          directory=$APP_DIR
          user=$USER
          autostart=true
          autorestart=true
          redirect_stderr=true
          stdout_logfile=$APP_DIR/logs/supervisor.log
          environment=PATH="$VENV_DIR/bin"

          [program:labmyshare-celery]
          command=$VENV_DIR/bin/celery -A labmyshare worker --loglevel=info
          directory=$APP_DIR
          user=$USER
          autostart=true
          autorestart=true
          redirect_stderr=true
          stdout_logfile=$APP_DIR/logs/celery.log
          environment=PATH="$VENV_DIR/bin"

          [program:labmyshare-celery-beat]
          command=$VENV_DIR/bin/celery -A labmyshare beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
          directory=$APP_DIR
          user=$USER
          autostart=true
          autorestart=true
          redirect_stderr=true
          stdout_logfile=$APP_DIR/logs/celery-beat.log
          environment=PATH="$VENV_DIR/bin"
          SUPERVISOR_EOF

          # Setup Nginx
          echo "🌐 Setting up Nginx..."
          sudo tee /etc/nginx/sites-available/labmyshare > /dev/null << NGINX_EOF
          server {
              listen 8000;
              server_name backend.beautyspabyshea.co.uk;

              client_max_body_size 50M;

              location / {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_redirect off;
              }

              location /static/ {
                  alias $APP_DIR/staticfiles/;
                  expires 30d;
                  add_header Cache-Control "public, no-transform";
              }

              location /media/ {
                  alias $APP_DIR/media/;
                  expires 7d;
                  add_header Cache-Control "public, no-transform";
              }

              location /health/ {
                  proxy_pass http://127.0.0.1:8000;
                  access_log off;
              }
          }
          NGINX_EOF

          # Actually, let's run Django directly on port 8000 without Nginx proxy
          # Remove Nginx configuration and run Gunicorn directly on port 8000
          
          # Update Supervisor and restart services
          sudo supervisorctl reread
          sudo supervisorctl update
          sudo supervisorctl restart all

          # Check service status
          echo "🔍 Checking service status..."
          sudo supervisorctl status

          echo "✅ Deployment completed successfully!"
          echo "🌐 Application should be available at: http://backend.beautyspabyshea.co.uk:8000"
          echo "🔍 Health check: http://backend.beautyspabyshea.co.uk:8000/health/"
          echo "👨‍💼 Admin panel: http://backend.beautyspabyshea.co.uk:8000/admin/"
          echo "📚 API docs: http://backend.beautyspabyshea.co.uk:8000/swagger/"
          
          EOF
          chmod +x deploy.sh

      - name: Deploy to server
        run: |
          scp deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} "bash /tmp/deploy.sh"

      - name: Health Check
        run: |
          echo "🔍 Health check..."
          sleep 60  # Give time for services to start

          # Check if port 8000 is accessible
          for i in {1..5}; do
            if nc -z ${{ secrets.SERVER_HOST }} 8000; then
              echo "✅ Port 8000 accessible"
              break
            else
              echo "⏳ Attempt $i/5: Port 8000 not yet accessible, waiting..."
              sleep 10
            fi
          done

          # Health check attempts
          for i in {1..10}; do
            echo "Health check attempt $i/10..."
            if curl -f -m 15 "http://backend.beautyspabyshea.co.uk:8000/health/" 2>&1; then
              echo "✅ Health check passed!"
              exit 0
            fi
            echo "⏳ Waiting 15 seconds before next attempt..."
            sleep 15
          done

          echo "❌ Health checks failed"
          echo "🔍 Checking service status..."
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} "sudo supervisorctl status || systemctl status postgresql redis-server || true"
          exit 1

      - name: Deployment Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Simple deployment successful!"
            echo "🌐 Application: http://backend.beautyspabyshea.co.uk:8000"
            echo "🔍 Health: http://backend.beautyspabyshea.co.uk:8000/health/"
            echo "📚 API docs: http://backend.beautyspabyshea.co.uk:8000/swagger/"
            echo "👨‍💼 Admin: http://backend.beautyspabyshea.co.uk:8000/admin/"
            echo "📊 Status: sudo supervisorctl status"
            echo "📋 Logs: tail -f /var/www/labmyshare/logs/supervisor.log"
          else
            echo "❌ Simple deployment failed"
            echo "🔍 Check logs with:"
            echo "  - sudo supervisorctl status"
            echo "  - tail -f /var/www/labmyshare/logs/supervisor.log"
            echo "  - tail -f /var/www/labmyshare/logs/gunicorn_error.log"
            echo "  - systemctl status postgresql redis-server"
          fi
