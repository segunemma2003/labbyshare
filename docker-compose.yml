version: "3.9"

services:
  # PostgreSQL Database with Persistent Storage
  db:
    container_name: labmyshare_db
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: labmyshare_db
      POSTGRES_USER: labmyshare
      POSTGRES_PASSWORD: labmyshare2020
      # Performance tuning
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      # Persistent database storage
      - postgres_data:/var/lib/postgresql/data/
      - ./backups/postgres:/backups
      # Custom PostgreSQL configuration for production
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U labmyshare -d labmyshare_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - labmyshare_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache and Session Store
  redis:
    container_name: labmyshare_redis
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 300
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - labmyshare_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Django Web Application
  web:
    container_name: labmyshare_web
    image: ghcr.io/beautyspabyshea/labmyshare:latest
    restart: unless-stopped
    command: >
      sh -c "
        echo '🚀 Starting LabMyShare Web Application...' &&
        echo '⏳ Waiting for database connection...' &&
        until nc -z db 5432; do sleep 2; done &&
        echo '✅ Database connection established!' &&
        echo '📊 Running database migrations...' &&
        python manage.py migrate --noinput &&
        echo '📦 Collecting static files...' &&
        python manage.py collectstatic --noinput &&
        echo '👤 Creating initial admin user...' &&
        python manage.py create_initial_data &&
        echo '🌐 Starting Gunicorn server...' &&
        gunicorn labmyshare.wsgi:application \\
          --bind 0.0.0.0:8000 \\
          --workers 4 \\
          --threads 2 \\
          --timeout 120 \\
          --max-requests 1000 \\
          --max-requests-jitter 100 \\
          --preload \\
          --worker-class gthread \\
          --worker-connections 1000 \\
          --access-logfile - \\
          --error-logfile - \\
          --log-level info
      "
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "127.0.0.1:8000:8000"  # Only bind to localhost
    env_file:
      - .env
    environment:
      # Production-specific environment variables
      - DJANGO_SETTINGS_MODULE=labmyshare.settings
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - labmyshare_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Celery Worker for Background Tasks
  celery:
    container_name: labmyshare_celery
    image: ghcr.io/beautyspabyshea/labmyshare:latest
    restart: unless-stopped
    command: >
      sh -c "
        echo '🔄 Starting Celery Worker...' &&
        until nc -z db 5432 && nc -z redis 6379; do sleep 2; done &&
        echo '✅ Dependencies ready, starting worker...' &&
        celery -A labmyshare worker \\
          --loglevel=info \\
          --concurrency=4 \\
          --max-tasks-per-child=1000 \\
          --max-memory-per-child=200000 \\
          --time-limit=300 \\
          --soft-time-limit=240
      "
    volumes:
      - media_volume:/app/media
      - logs_volume:/app/logs
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=labmyshare.settings
      - PYTHONUNBUFFERED=1
      - C_FORCE_ROOT=1
    depends_on:
      - db
      - redis
      - web
    healthcheck:
      test: ["CMD", "celery", "-A", "labmyshare", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - labmyshare_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Beat for Scheduled Tasks
  celery-beat:
    container_name: labmyshare_celery_beat
    image: ghcr.io/beautyspabyshea/labmyshare:latest
    restart: unless-stopped
    command: >
      sh -c "
        echo '⏰ Starting Celery Beat Scheduler...' &&
        until nc -z db 5432 && nc -z redis 6379; do sleep 2; done &&
        echo '✅ Dependencies ready, starting beat scheduler...' &&
        celery -A labmyshare beat \\
          --loglevel=info \\
          --scheduler django_celery_beat.schedulers:DatabaseScheduler \\
          --pidfile=/tmp/celerybeat.pid
      "
    volumes:
      - logs_volume:/app/logs
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=labmyshare.settings
      - PYTHONUNBUFFERED=1
    depends_on:
      - db
      - redis
      - web
    healthcheck:
      test: ["CMD", "pgrep", "-f", "celery.*beat"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - labmyshare_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy (HTTP-only)
  nginx:
    container_name: labmyshare_nginx
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "8080:80"  # HTTP only on port 8080
    volumes:
      - ./docker/nginx/http-only.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - nginx_logs:/var/log/nginx
      # Nginx cache directory
      - nginx_cache:/var/cache/nginx
    environment:
      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template
    depends_on:
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - labmyshare_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Database Backup Service
  db-backup:
    container_name: labmyshare_db_backup
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: labmyshare_db
      POSTGRES_USER: labmyshare
      POSTGRES_PASSWORD: labmyshare2020
      PGPASSWORD: labmyshare2020
    volumes:
      - ./backups/postgres:/backups
      - ./docker/scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c "
        echo '🗄️ Starting Database Backup Service...' &&
        until nc -z db 5432; do sleep 5; done &&
        echo '✅ Database ready, setting up backup schedule...' &&
        chmod +x /backup.sh &&
        # Daily backup at 2 AM, keep backups for 7 days
        echo '0 2 * * * /backup.sh' | crontab - &&
        echo '📅 Backup schedule configured (daily at 2 AM)' &&
        echo '🔄 Starting cron daemon...' &&
        crond -f
      "
    depends_on:
      db:
        condition: service_healthy
    networks:
      - labmyshare_network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Log Aggregator (Optional - for monitoring)
  log-monitor:
    container_name: labmyshare_log_monitor
    image: alpine:latest
    restart: unless-stopped
    volumes:
      - logs_volume:/app/logs:ro
      - nginx_logs:/nginx/logs:ro
    command: >
      sh -c "
        echo '📊 Starting Log Monitor...' &&
        apk add --no-cache tail coreutils findutils &&
        while true; do
          echo '=== Log Summary ===' &&
          echo 'Application logs:' &&
          find /app/logs -name '*.log' -exec wc -l {} + 2>/dev/null || echo 'No app logs found' &&
          echo 'Nginx logs:' &&
          find /nginx/logs -name '*.log' -exec wc -l {} + 2>/dev/null || echo 'No nginx logs found' &&
          echo '==================' &&
          sleep 3600
        done
      "
    networks:
      - labmyshare_network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

# Persistent Volumes with Bind Mounts
volumes:
  # PostgreSQL persistent data
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/www/labmyshare/storage/postgres

  # Redis persistent data
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/www/labmyshare/storage/redis

  # Static files (CSS, JS, images)
  static_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/www/labmyshare/storage/static

  # User uploaded media files
  media_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/www/labmyshare/storage/media

  # Application logs
  logs_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/www/labmyshare/storage/logs

  # Nginx logs
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/www/labmyshare/storage/nginx-logs

  # Nginx cache
  nginx_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/www/labmyshare/storage/nginx-cache

# Networks
networks:
  labmyshare_network:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
